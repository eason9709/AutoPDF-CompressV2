import streamlit as st
import os
import tempfile
from PyPDF2 import PdfMerger, PdfReader
import base64
from io import BytesIO

def pdf_merge_page():
    st.header("üìÑ PDFÂêà‰Ωµ")
    st.write("Â∞áÂ§öÂÄãPDFÊñá‰ª∂Âêà‰ΩµÁÇ∫‰∏ÄÂÄãPDFÊñá‰ª∂")
    
    # Êñá‰ª∂‰∏äÂÇ≥ÂçÄÂüü
    uploaded_files = st.file_uploader(
        "ÈÅ∏ÊìáÂ§öÂÄãPDFÊñá‰ª∂ÔºàÂèØÂ§öÈÅ∏Ôºâ", 
        type="pdf", 
        accept_multiple_files=True
    )
    
    # Â¶ÇÊûúÁî®Êà∂‰∏äÂÇ≥‰∫ÜÊñá‰ª∂
    if uploaded_files:
        # È°ØÁ§∫‰∏äÂÇ≥ÁöÑÊñá‰ª∂
        st.write(f"Â∑≤‰∏äÂÇ≥ {len(uploaded_files)} ÂÄãÊñá‰ª∂:")
        file_names = [file.name for file in uploaded_files]
        
        # Ê™¢Êü•ÊòØÂê¶ÊúâÂä†ÂØÜÁöÑPDFÊñá‰ª∂
        encrypted_files = []
        with tempfile.TemporaryDirectory() as check_tmpdirname:
            for i, file in enumerate(uploaded_files):
                temp_check_file = os.path.join(check_tmpdirname, f"check_{i}.pdf")
                with open(temp_check_file, "wb") as f:
                    f.write(file.getbuffer())
                
                # Ê™¢Êü•Êñá‰ª∂ÊòØÂê¶Âä†ÂØÜ
                try:
                    reader = PdfReader(temp_check_file)
                    if reader.is_encrypted:
                        encrypted_files.append((i, file.name))
                except Exception as e:
                    if "encrypted" in str(e).lower():
                        encrypted_files.append((i, file.name))
        
        # Â¶ÇÊûúÊúâÂä†ÂØÜÊñá‰ª∂ÔºåÈ°ØÁ§∫ÂØÜÁ¢ºËº∏ÂÖ•ÂçÄÂüü
        file_passwords = {}
        if encrypted_files:
            st.warning(f"Ê™¢Ê∏¨Âà∞ {len(encrypted_files)} ÂÄãÂä†ÂØÜÁöÑPDFÊñá‰ª∂„ÄÇË´ãÊèê‰æõÂØÜÁ¢ºËß£Èéñ:")
            
            with st.expander("Âä†ÂØÜÊñá‰ª∂ËôïÁêÜ", expanded=True):
                for idx, filename in encrypted_files:
                    password_key = f"password_{idx}"
                    st.text(f"Êñá‰ª∂: {filename}")
                    file_passwords[idx] = st.text_input(
                        f"Ëº∏ÂÖ• '{filename}' ÁöÑÂØÜÁ¢º", 
                        type="password",
                        key=password_key
                    )
        
        # È°ØÁ§∫Êñá‰ª∂ÂàóË°®‰∏¶ÂÖÅË®±ÊéíÂ∫è
        with st.expander("Êü•Áúã‰∏¶ÊéíÂ∫èÊñá‰ª∂", expanded=True):
            for i, name in enumerate(file_names):
                is_encrypted = any(idx == i for idx, _ in encrypted_files)
                st.text(f"{i+1}. {name} {'üîí' if is_encrypted else ''}")
                
            # ÂÖÅË®±Áî®Êà∂ÈáçÊñ∞ÊéíÂ∫èÊñá‰ª∂
            st.write("ÈÄöÈÅé‰ª•ÈÄóËôüÂàÜÈöîÁöÑÊï∏Â≠óÊéíÂ∫èÊñá‰ª∂Ôºà‰æãÂ¶ÇÔºö2,1,3Ôºâ")
            order_input = st.text_input("ÈáçÊñ∞ÊéíÂ∫èÔºàÁïôÁ©∫‰øùÊåÅÂéüÂßãÈ†ÜÂ∫èÔºâ")
            
            if order_input:
                try:
                    # Ëß£ÊûêÁî®Êà∂Ëº∏ÂÖ•ÁöÑÈ†ÜÂ∫è
                    new_order = [int(x.strip())-1 for x in order_input.split(',')]
                    
                    # Ê™¢Êü•È†ÜÂ∫èÊòØÂê¶ÊúâÊïà
                    if set(new_order) != set(range(len(uploaded_files))):
                        st.error("ÊéíÂ∫èÁÑ°ÊïàÔºåË´ãÁ¢∫‰øùÂåÖÂê´ÊâÄÊúâÊñá‰ª∂Á∑®Ëôü")
                    else:
                        # ÈáçÊñ∞ÊéíÂ∫èÊñá‰ª∂ÂàóË°®
                        uploaded_files = [uploaded_files[i] for i in new_order]
                        
                        # ÂêåÊôÇÊõ¥Êñ∞Âä†ÂØÜÊñá‰ª∂Á¥¢Âºï
                        new_encrypted_files = []
                        for old_idx, name in encrypted_files:
                            new_idx = new_order.index(old_idx)
                            new_encrypted_files.append((new_idx, name))
                            # Êõ¥Êñ∞ÂØÜÁ¢ºÂ≠óÂÖ∏‰∏≠ÁöÑÁ¥¢Âºï
                            if old_idx in file_passwords:
                                file_passwords[new_idx] = file_passwords.pop(old_idx)
                        
                        encrypted_files = new_encrypted_files
                        st.success("Êñá‰ª∂Â∑≤ÈáçÊñ∞ÊéíÂ∫è")
                        
                        # È°ØÁ§∫Êñ∞È†ÜÂ∫è
                        st.write("Êñ∞ÁöÑÊñá‰ª∂È†ÜÂ∫è:")
                        for i, file in enumerate(uploaded_files):
                            is_encrypted = any(idx == i for idx, _ in encrypted_files)
                            st.text(f"{i+1}. {file.name} {'üîí' if is_encrypted else ''}")
                except:
                    st.error("ÊéíÂ∫èÊ†ºÂºèÁÑ°ÊïàÔºåË´ã‰ΩøÁî®ÈÄóËôüÂàÜÈöîÁöÑÊï∏Â≠ó")

        # Ëº∏Âá∫Êñá‰ª∂Âêç
        output_name = st.text_input("Ëº∏Âá∫Êñá‰ª∂Âêç", value="merged_document.pdf")
        if not output_name.endswith('.pdf'):
            output_name += '.pdf'
            
        # ËôïÁêÜËº∏Âá∫Êñá‰ª∂Âêç‰ª•Á¢∫‰øùÂêàÊ≥ï
        safe_output_name = "".join([c for c in output_name if c.isalnum() or c in "._- "]).strip()
        if not safe_output_name:
            safe_output_name = "merged_document.pdf"
        elif not safe_output_name.lower().endswith('.pdf'):
            safe_output_name += '.pdf'
        
        # Âêà‰ΩµÊåâÈàï
        if st.button("Âêà‰ΩµPDFÊñá‰ª∂"):
            if len(uploaded_files) > 1:
                # Ê™¢Êü•ÊòØÂê¶ÊâÄÊúâÂä†ÂØÜÊñá‰ª∂ÈÉΩÊúâÊèê‰æõÂØÜÁ¢º
                missing_passwords = [name for idx, name in encrypted_files if not file_passwords.get(idx)]
                if missing_passwords:
                    st.error(f"Ë´ãÁÇ∫ÊâÄÊúâÂä†ÂØÜÊñá‰ª∂Êèê‰æõÂØÜÁ¢º„ÄÇ‰ª•‰∏ãÊñá‰ª∂Áº∫Â∞ëÂØÜÁ¢º: {', '.join(missing_passwords)}")
                else:
                    with st.spinner("Ê≠£Âú®Âêà‰ΩµPDFÊñá‰ª∂..."):
                        # ‰ΩøÁî®Ëá®ÊôÇÁõÆÈåÑ‰øùÂ≠ò‰∏äÂÇ≥ÁöÑÊñá‰ª∂
                        with tempfile.TemporaryDirectory() as tmpdirname:
                            # ‰øùÂ≠ò‰∏äÂÇ≥ÁöÑÊñá‰ª∂Âà∞Ëá®ÊôÇÁõÆÈåÑ‰∏¶ËôïÁêÜÂä†ÂØÜÊñá‰ª∂
                            temp_files = []
                            error_files = []
                            
                            for i, file in enumerate(uploaded_files):
                                temp_file = os.path.join(tmpdirname, f"file_{i}.pdf")
                                with open(temp_file, "wb") as f:
                                    f.write(file.getbuffer())
                                
                                # Ê™¢Êü•ÊòØÂê¶ÁÇ∫Âä†ÂØÜÊñá‰ª∂ÔºåÂ¶ÇÊûúÊòØÂâáÂòóË©¶Ëß£ÂØÜ
                                is_encrypted_idx = next((idx for idx, _ in encrypted_files if idx == i), None)
                                if is_encrypted_idx is not None:
                                    password = file_passwords.get(i)
                                    decrypted_file = os.path.join(tmpdirname, f"decrypted_{i}.pdf")
                                    
                                    try:
                                        # ÂòóË©¶Ëß£ÂØÜÊñá‰ª∂
                                        reader = PdfReader(temp_file)
                                        writer = PdfMerger()
                                        
                                        # ‰ΩøÁî®ÂØÜÁ¢ºËß£ÂØÜ
                                        if reader.is_encrypted:
                                            decrypt_success = False
                                            
                                            # ÂòóË©¶Ê®ôÊ∫ñËß£ÂØÜ
                                            try:
                                                decrypt_result = reader.decrypt(password)
                                                if decrypt_result > 0:
                                                    decrypt_success = True
                                            except Exception:
                                                pass
                                            
                                            # Â¶ÇÊûúÊ®ôÊ∫ñËß£ÂØÜÂ§±ÊïóÔºåÂòóË©¶ÂÖ∂‰ªñÁ∑®Á¢º
                                            if not decrypt_success:
                                                for encoding in ['utf-8', 'latin1', 'cp1252', 'gbk', 'big5']:
                                                    try:
                                                        reader = PdfReader(temp_file)
                                                        if reader.decrypt(password) > 0:
                                                            decrypt_success = True
                                                            break
                                                    except Exception:
                                                        continue
                                            
                                            # ÂòóË©¶‰ΩøÁî®pikepdf
                                            if not decrypt_success:
                                                try:
                                                    import pikepdf
                                                    pdf = pikepdf.open(temp_file, password=password)
                                                    pdf.save(decrypted_file)
                                                    temp_file = decrypted_file
                                                    decrypt_success = True
                                                except Exception:
                                                    pass
                                            
                                            # Â¶ÇÊûúÊâÄÊúâÊñπÊ≥ïÈÉΩÂ§±Êïó
                                            if not decrypt_success:
                                                error_files.append(file.name)
                                                continue
                                    except Exception as e:
                                        error_files.append(file.name)
                                        continue
                                
                                temp_files.append(temp_file)
                            
                            # Â¶ÇÊûúÊúâÁÑ°Ê≥ïËß£ÂØÜÁöÑÊñá‰ª∂ÔºåÈ°ØÁ§∫ÈåØË™§‰∏¶‰∏≠Êñ∑Êìç‰Ωú
                            if error_files:
                                st.error(f"ÁÑ°Ê≥ïËß£ÂØÜ‰ª•‰∏ãÊñá‰ª∂ÔºåË´ãÊ™¢Êü•ÂØÜÁ¢ºÊòØÂê¶Ê≠£Á¢∫: {', '.join(error_files)}")
                            else:
                                try:
                                    # ÂâµÂª∫Âêà‰ΩµÂô®Â∞çË±°
                                    merger = PdfMerger()
                                    
                                    # Ê∑ªÂä†ÊâÄÊúâPDFÊñá‰ª∂
                                    for temp_file in temp_files:
                                        merger.append(temp_file)
                                    
                                    # ‰øùÂ≠òÂêà‰ΩµÂæåÁöÑPDF
                                    merged_file = os.path.join(tmpdirname, safe_output_name)
                                    merger.write(merged_file)
                                    merger.close()
                                    
                                    # ËÆÄÂèñÂêà‰ΩµÂæåÁöÑÊñá‰ª∂
                                    with open(merged_file, "rb") as f:
                                        pdf_bytes = f.read()
                                    
                                    # ÂâµÂª∫‰∏ãËºâÊåâÈàï
                                    b64_pdf = base64.b64encode(pdf_bytes).decode()
                                    href = f'<a href="data:application/pdf;base64,{b64_pdf}" download="{output_name}" class="download-button">‰∏ãËºâÂêà‰ΩµÂæåÁöÑPDF</a>'
                                    st.markdown(href, unsafe_allow_html=True)
                                    
                                    # È°ØÁ§∫ÊàêÂäüÊ∂àÊÅØ
                                    if encrypted_files:
                                        st.success(f"Â∑≤ÊàêÂäüËß£ÂØÜÂíåÂêà‰Ωµ {len(uploaded_files)} ÂÄãPDFÊñá‰ª∂")
                                    else:
                                        st.success(f"Â∑≤ÊàêÂäüÂêà‰Ωµ {len(uploaded_files)} ÂÄãPDFÊñá‰ª∂")
                                except Exception as e:
                                    st.error(f"Âêà‰ΩµÈÅéÁ®ã‰∏≠Âá∫ÈåØ: {str(e)}")
            else:
                st.error("Ë´ãËá≥Â∞ë‰∏äÂÇ≥2ÂÄãPDFÊñá‰ª∂ÈÄ≤Ë°åÂêà‰Ωµ")
    else:
        # È°ØÁ§∫‰ΩøÁî®Ë™™Êòé
        st.info("Ë´ãÂÖà‰∏äÂÇ≥Ëá≥Â∞ë2ÂÄãPDFÊñá‰ª∂ÈÄ≤Ë°åÂêà‰ΩµÊìç‰Ωú")
        
        # Á§∫‰æã
        st.markdown("""
        ### ‰ΩøÁî®Ë™™Êòé
        1. ÈªûÊìä‰∏äÊñπ"ÈÅ∏ÊìáÂ§öÂÄãPDFÊñá‰ª∂"ÊåâÈàï‰∏äÂÇ≥Â§öÂÄãPDF
        2. Ëã•‰∏äÂÇ≥‰∫ÜÂä†ÂØÜPDFÊñá‰ª∂ÔºåÁ≥ªÁµ±ÊúÉË´ãÊÇ®Êèê‰æõÂØÜÁ¢º
        3. ÂèØ‰ª•ÈÄöÈÅéÊéíÂ∫èÂäüËÉΩË™øÊï¥PDFÂêà‰ΩµÈ†ÜÂ∫è
        4. Ë®≠ÁΩÆËº∏Âá∫Êñá‰ª∂ÂêçÁ®±
        5. ÈªûÊìä"Âêà‰ΩµPDFÊñá‰ª∂"ÊåâÈàïÈÄ≤Ë°åÂêà‰Ωµ
        6. ÂÆåÊàêÂæå‰∏ãËºâÂêà‰ΩµÂæåÁöÑÊñá‰ª∂
        
        ### ÈÅ©Áî®Â†¥ÊôØ
        - Âêà‰ΩµÂ§öÂÄãÂ†±ÂëäÁÇ∫‰∏ÄÂÄãÊñáÊ™î
        - Â∞áÂàÜÊï£ÁöÑÁ´†ÁØÄÂêà‰ΩµÁÇ∫ÂÆåÊï¥Êõ∏Á±ç
        - Êï¥ÂêàÂ§öÂÄãË°®Ê†ºÁÇ∫ÂÆåÊï¥Â†±Ë°®
        - ËôïÁêÜ‰∏¶Âêà‰ΩµÂèóÂØÜÁ¢º‰øùË≠∑ÁöÑPDFÊñá‰ª∂
        """) 